strip.background = element_blank(),
axis.text.y = element_text(family = "Passero One")
)
res %>%
filter(category != "NA") %>%
filter(offline_fast_hashing_1e10_per_second < 1e-5) %>%
mutate(password = fct_reorder(password, offline_fast_hashing_1e10_per_second, .fun = median)) %>%
group_by(category) %>%
top_n(10, offline_fast_hashing_1e10_per_second) %>%
ungroup() %>%
mutate(category = fct_reorder(category, offline_fast_hashing_1e10_per_second, max, .desc = T)) %>%
ggplot(aes(x = password, y = offline_fast_hashing_1e10_per_second)) +
geom_col(fill = "#687677") +
# scale_y_log10() +
coord_flip() +
facet_wrap(~category, scales = "free_y") +
scale_y_continuous(breaks = scales::breaks_pretty(n = 4), labels = scales::label_number()) +
labs(
title = "sdfsdf sdf0234"
) +
theme(
strip.text = element_text(color = "#25364a", size = 14, face = "bold"),
strip.background = element_blank(),
axis.text.y = element_text(family = "Passero One")
)
scale_y_continuous(breaks = scales::breaks_pretty(n = 4), labels = scales::label_number_si() +
res %>%
filter(category != "NA") %>%
filter(offline_fast_hashing_1e10_per_second < 1e-5) %>%
mutate(password = fct_reorder(password, offline_fast_hashing_1e10_per_second, .fun = median)) %>%
group_by(category) %>%
top_n(10, offline_fast_hashing_1e10_per_second) %>%
ungroup() %>%
mutate(category = fct_reorder(category, offline_fast_hashing_1e10_per_second, max, .desc = T)) %>%
ggplot(aes(x = password, y = offline_fast_hashing_1e10_per_second)) +
geom_col(fill = "#687677") +
# scale_y_log10() +
coord_flip() +
facet_wrap(~category, scales = "free_y") +
scale_y_continuous(breaks = scales::breaks_pretty(n = 4), labels = scales::label_number_si()) +
labs(
title = "sdfsdf sdf0234"
) +
theme(
strip.text = element_text(color = "#25364a", size = 14, face = "bold"),
strip.background = element_blank(),
axis.text.y = element_text(family = "Passero One")
)
res %>%
filter(category != "NA") %>%
filter(offline_fast_hashing_1e10_per_second < 1e-5) %>%
mutate(password = fct_reorder(password, offline_fast_hashing_1e10_per_second, .fun = median)) %>%
group_by(category) %>%
top_n(10, offline_fast_hashing_1e10_per_second) %>%
ungroup() %>%
mutate(category = fct_reorder(category, offline_fast_hashing_1e10_per_second, max, .desc = T)) %>%
ggplot(aes(x = password, y = offline_fast_hashing_1e10_per_second)) +
geom_col(fill = "#687677") +
# scale_y_log10() +
coord_flip() +
facet_wrap(~category, scales = "free_y") +
scale_y_continuous(breaks = scales::breaks_pretty(n = 4), labels = scales::label_math()) +
labs(
title = "sdfsdf sdf0234"
) +
theme(
strip.text = element_text(color = "#25364a", size = 14, face = "bold"),
strip.background = element_blank(),
axis.text.y = element_text(family = "Passero One")
)
res %>%
filter(category != "NA") %>%
filter(offline_fast_hashing_1e10_per_second < 1e-5) %>%
mutate(password = fct_reorder(password, offline_fast_hashing_1e10_per_second, .fun = median)) %>%
group_by(category) %>%
top_n(10, offline_fast_hashing_1e10_per_second) %>%
ungroup() %>%
mutate(category = fct_reorder(category, offline_fast_hashing_1e10_per_second, max, .desc = T)) %>%
ggplot(aes(x = password, y = offline_fast_hashing_1e10_per_second)) +
geom_col(fill = "#687677") +
# scale_y_log10() +
coord_flip() +
facet_wrap(~category, scales = "free_y") +
scale_y_continuous(breaks = scales::breaks_pretty(n = 4), labels = scales::label_scientific()) +
labs(
title = "sdfsdf sdf0234"
) +
theme(
strip.text = element_text(color = "#25364a", size = 14, face = "bold"),
strip.background = element_blank(),
axis.text.y = element_text(family = "Passero One")
)
ggsave("c:/Users/pmass/Desktop/test.pdf", device = cairo_pdf, width = 12, height = 10)
res %>%
filter(category != "NA") %>%
filter(offline_fast_hashing_1e10_per_second < 1e-5) %>%
mutate(password = fct_reorder(password, offline_fast_hashing_1e10_per_second, .fun = median)) %>%
group_by(category) %>%
top_n(10, offline_fast_hashing_1e10_per_second) %>%
ungroup() %>%
mutate(category = fct_reorder(category, offline_fast_hashing_1e10_per_second, max, .desc = T)) %>%
ggplot(aes(x = password, y = offline_fast_hashing_1e10_per_second)) +
geom_col(fill = "#687677") +
# scale_y_log10() +
coord_flip() +
facet_wrap(~category, scales = "free_y") +
scale_y_continuous(breaks = scales::breaks_pretty(n = 4)) +
labs(
title = "sdfsdf sdf0234"
) +
theme(
strip.text = element_text(color = "#25364a", size = 14, face = "bold"),
strip.background = element_blank(),
axis.text.y = element_text(family = "Passero One")
)
ggsave("c:/Users/pmass/Desktop/test.pdf", device = cairo_pdf, width = 12, height = 10)
res %>%
filter(category != "NA") %>%
filter(offline_fast_hashing_1e10_per_second < 1e-5) %>%
mutate(password = fct_reorder(password, offline_fast_hashing_1e10_per_second, .fun = median)) %>%
group_by(category) %>%
top_n(10, offline_fast_hashing_1e10_per_second) %>%
ungroup() %>%
mutate(category = fct_reorder(category, offline_fast_hashing_1e10_per_second, max, .desc = T)) %>%
ggplot(aes(x = password, y = offline_fast_hashing_1e10_per_second)) +
geom_col(fill = "#687677") +
# scale_y_log10() +
coord_flip() +
facet_wrap(~category, scales = "free_y") +
scale_y_continuous(breaks = scales::breaks_pretty(n = 3)) +
labs(
title = "sdfsdf sdf0234"
) +
theme(
strip.text = element_text(color = "#25364a", size = 14, face = "bold"),
strip.background = element_blank(),
axis.text.y = element_text(family = "Passero One")
)
ggsave("c:/Users/pmass/Desktop/test.pdf", device = cairo_pdf, width = 12, height = 10)
install.packages(c("bayestestR", "RCurl", "XML"))
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
data = cat,
aes(
x = pos,
y = -5,
label = str_replace_all(category, "-", "\n"),
angle = angle2,
color = category,
hjust = hjust
),
size = 2,
alpha = 0.75) +
annotate("text", x = 0, y = -25, label = "SDfsdfdf", color = "white") +
theme(
data = cat,
aes(
x = pos,
y = -5,
label = str_replace_all(category, "-", "\n"),
angle = angle2,
color = category,
hjust = hjust
),
size = 2,
alpha = 0.75) +
annotate("text", x = 0, y = -25, label = "SDfsdfdf", color = "white") +
theme(
data = cat,
aes(
x = pos,
y = -5,
label = str_replace_all(category, "-", "\n"),
angle = angle2,
color = category,
hjust = hjust
),
size = 2,
alpha = 0.75) +
annotate("text", x = 0, y = -25, label = "SDfsdfdf", color = "white") +
theme(
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
data = cat,
aes(
x = pos,
y = -5,
label = str_replace_all(category, "-", "\n"),
angle = angle2,
color = category,
hjust = hjust
),
size = 2,
alpha = 0.75) +
annotate("text", x = 0, y = -50, label = "SDfsdfdf", color = "white") +
labs(
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
data = cat,
aes(
x = pos,
y = -5,
label = str_replace_all(category, "-", "\n"),
angle = angle2,
color = category,
hjust = hjust
),
size = 2,
alpha = 0.75) +
annotate("text", x = 0, y = -50, label = "SDfsdfdf", color = "white", family = Passero One) +
theme(
styler:::style_selection()
styler:::style_selection()
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
p <- psw %>%
ggplot(aes(
x = factor(rowid),
y = strength + 1,
fill = category
)) +
# geom_col() +
geom_col() +
scale_y_continuous(limits = c(-50, 50), expand = c(0, 0)) +
scale_x_discrete(expand = c(0, 0)) +
coord_polar(start = 0) +
geom_text(
data = label_data,
aes(
x = factor(rowid),
y = -1,
label = password,
hjust = hjust
),
color = "white",
fontface = "plain",
alpha = 0.9,
size = 0.66,
angle = label_data$angle,
inherit.aes = FALSE,
family = "Source Sans Pro"
) +
paletteer::scale_fill_paletteer_d("vapoRwave::vapoRwave") +
paletteer::scale_color_paletteer_d("vapoRwave::vapoRwave") +
geom_text(
data = cat,
aes(
x = pos,
y = -5,
label = str_replace_all(category, "-", "\n"),
angle = angle2,
color = category,
hjust = hjust
),
size = 2,
alpha = 0.75
) +
annotate(
"text",
x = 0,
y = -50,
label = "SDfsdfdf",
color = "white",
family = "Neuton"
) +
theme(
legend.position = "none",
axis.text = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.background = element_rect(fill = "#3c3c3c"),
panel.background = element_rect(fill = "#3c3c3c")
)
p
ggsave(
"c:/Users/pmass/Desktop/test.pdf",
device = cairo_pdf,
width = 10,
height = 10
)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03b.R', echo=TRUE)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week03.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
spotify_songs
View(spotify_songs)
library(tidyverse)
spotify_songs %>%
count(playlist_genre)
spotify_songs %>%
ggplot(aes(x = energy)) +
geom_histogram()
spotify_songs %>%
ggplot(aes(x = energy)) +
geom_histogram() +
facet_wrap(~playlist_genre)
library(ggridges)
spotify_songs +
ggplot(aes(x = energy, y = playlist_genre)) +
geom_density_ridges()
spotify_songs %>%
ggplot(aes(x = energy, y = playlist_genre)) +
geom_density_ridges()
spotify_songs %>%
ggplot(aes(x = energy, y = playlist_genre, fill = stat(x))) +
geom_density_ridges_gradient()
spotify_songs %>%
ggplot(aes(x = energy, y = playlist_genre, fill = stat(x))) +
geom_density_ridges_gradient() +
paletteer::scale_fill_paletteer_d("vapoRwave::vapoRwave")
spotify_songs %>%
ggplot(aes(x = energy, y = playlist_genre, fill = stat(x))) +
geom_density_ridges_gradient() +
paletteer::scale_fill_paletteer_c("vapoRwave::vapoRwave")
library(paletteer)
spotify_songs %>%
ggplot(aes(x = energy, y = playlist_genre, fill = stat(x))) +
geom_density_ridges_gradient() +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister")
spotify_songs %>%
ggplot(aes(x = speechiness, y = playlist_genre, fill = stat(x))) +
geom_density_ridges_gradient() +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister")
spotify_songs %>%
ggplot(aes(x = speechiness, y = playlist_genre, fill = stat(x))) +
geom_density_ridges_gradient(gradient_lwd = 0.5) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister")
spotify_songs %>%
ggplot(aes(x = speechiness, y = playlist_genre, fill = stat(x))) +
geom_density_ridges_gradient(gradient_lwd = 0) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister")
spotify_songs %>%
ggplot(aes(x = speechiness, y = playlist_genre, fill = stat(x))) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister")
spotify_songs %>%
ggplot(aes(x = tempo, y = playlist_genre, fill = stat(x))) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister")
spotify_songs %>%
mutate(year = lubridate::year(track_album_release_date))
unique(spotify_songs$track_album_release_date)
spotify_songs %>%
mutate(year = str_extract_all(track_album_release_date, "\\d{4}"))
spotify_songs %>%
mutate(year = str_extract_all(track_album_release_date, "\\d{4}")[, 2])
spotify_songs %>%
mutate(year = str_match(track_album_release_date, "(^\\d{4})")[, 2])
spotify_songs %>%
mutate(year = str_match(track_album_release_date, "(^\\d{4})")[, 2]) %>%
ggplot(aes(x = tempo, y = playlist_genre, fill = stat(x))) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister") +
facet_wrap(~year)
install.packages(c("anytime", "blob", "RCurl", "rmarkdown", "tmap", "xaringan", "XML"))
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week04.R', echo=TRUE)
spotify_songs %>%
mutate(year = str_match(track_album_release_date, "(^\\d{4})")[, 2]) %>%
ggplot(aes(x = tempo, y = year, fill = stat(x), group = year)) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister") +
facet_wrap(~playlist_genre)
spotify_songs %>%
mutate(year = str_match(track_album_release_date, "(^\\d{4})")[, 2]) %>%
mutate(year = parse_number(year))
spotify_songs %>%
mutate(year = str_match(track_album_release_date, "(^\\d{4})")[, 2]) %>%
mutate(year = parse_number(year)) %>%
ggplot(aes(x = tempo, y = year, fill = stat(x), group = year)) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister") +
facet_wrap(~playlist_genre)
spotify_songs
spotify_songs %>%
filtre(playlist_genre == "rock")
spotify_songs %>%
filter(playlist_genre == "rock")
spotify_songs %>%
filter(playlist_genre == "rock") %>%
mutate(year = str_match(track_album_release_date, "(^\\d{4})")[, 2]) %>%
mutate(year = parse_number(year)) %>%
ggplot(aes(x = tempo, y = year, fill = stat(x), group = year)) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister") +
facet_wrap(~playlist_genre)
spotify_songs %>%
filter(playlist_genre == "rock") %>%
mutate(year = str_match(track_album_release_date, "(^\\d{4})")[, 2]) %>%
mutate(year = parse_number(year)) %>%
ggplot(aes(x = tempo, y = year, fill = stat(x), group = year)) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister") +
facet_wrap(~playlist_subgenre)
spotify_songs %>%
filter(playlist_genre == "rock") %>%
mutate(year = str_match(track_album_release_date, "(^\\d{4})")[, 2]) %>%
mutate(year = parse_number(year)) %>%
ggplot(aes(x = duration, y = year, fill = stat(x), group = year)) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister") +
facet_wrap(~playlist_subgenre)
spotify_songs %>%
filter(playlist_genre == "rock") %>%
mutate(year = str_match(track_album_release_date, "(^\\d{4})")[, 2]) %>%
mutate(year = parse_number(year)) %>%
ggplot(aes(x = duration_ms, y = year, fill = stat(x), group = year)) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister") +
facet_wrap(~playlist_subgenre)
source('~/r_projects/tidytuesday/R/tidytuesday_2020_week04.R', echo=TRUE)
spotify_songs
spotify_songs %>%
filter(playlist_genre == "rock") %>%
mutate(year = str_match(track_album_release_date, "(^\\d{4})")[, 2]) %>%
mutate(year = parse_number(year)) %>%
ggplot(aes(x = danceability, y = year, fill = stat(x), group = year)) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister") +
facet_wrap(~playlist_subgenre)
spotify_songs %>%
filter(playlist_genre == "rock") %>%
mutate(year = str_match(track_album_release_date, "(^\\d{4})")[, 2]) %>%
mutate(year = parse_number(year)) %>%
ggplot(aes(x = instrumentalness, y = year, fill = stat(x), group = year)) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister") +
facet_wrap(~playlist_subgenre)
spotify_songs %>% distinct(playlist_genre)
spotify_songs %>%
filter(playlist_genre == "rap") %>%
mutate(year = str_match(track_album_release_date, "(^\\d{4})")[, 2]) %>%
mutate(year = parse_number(year)) %>%
ggplot(aes(x = instrumentalness, y = year, fill = stat(x), group = year)) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
paletteer::scale_fill_paletteer_c("gameofthrones::lannister") +
facet_wrap(~playlist_subgenre)
spotify_songs %>%
ggplot(aes(x = energy)) +
geom_histogram() +
facet_wrap(~playlist_genre)
spotify_songs %>%
ggplot(aes(x = instrumentalness)) +
geom_histogram() +
facet_wrap(~playlist_genre)
spotify_songs %>%
ggplot(aes(x = instrumentalness)) +
geom_histogram() +
facet_wrap(~playlist_genre) +
scale_x_log10()
spotify_songs %>%
ggplot(aes(x = instrumentalness)) +
geom_histogram() +
facet_wrap(~playlist_genre) +
scale_x_continuous(trans = "log10p")
spotify_songs %>%
ggplot(aes(x = instrumentalness)) +
geom_histogram() +
facet_wrap(~playlist_genre) +
scale_x_continuous(trans = "log1p")
spotify_songs %>%
ggplot(aes(x = instrumentalness)) +
geom_histogram() +
facet_wrap(~playlist_genre) +
scale_x_log10()
spotify_songs
spotify_songs %>%
ggplot(aes(x = danceability)) +
geom_histogram() +
facet_wrap(~playlist_genre) +
scale_x_log10()
spotify_songs %>%
ggplot(aes(x = danceability)) +
geom_histogram() +
facet_wrap(~playlist_genre)
spotify_songs %>%
ggplot(aes(x = energy)) +
geom_histogram() +
facet_wrap(~playlist_genre)
