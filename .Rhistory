geom_mark_circle(
aes(
label = glue("{name}"),
description = "The oldest emperor",
filter = age == max(age),
color = dynasty
),
expand = unit(0.01, "mm"),
label.family = c("Poppins"),
label.fontsize = 8,
label.buffer = unit(5, "mm"),
label.hjust = 1,
show.legend = FALSE
) +
geom_mark_circle(
aes(
label = glue("{name}"),
description = "The longest reign",
filter = reign_duration == max(reign_duration),
color = dynasty
),
expand = unit(0.01, "mm"),
label.family = c("Poppins"),
label.fontsize = 8,
label.buffer = unit(5, "mm"),
label.hjust = 1,
show.legend = FALSE
) +
theme(legend.position = "bottom") +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
scale_x_date(expand = expand_scale(mult = c(0.02, 0.3))) +
ylab(NULL) +
xlab("Years") +
labs(color = "Dynasty") +
labs(title = str_wrap("Roman emperors: their birth, death and reign", 35)) +
labs(subtitle = str_wrap("Colored bars represent the lifespan whereas the black bars the duration of the reign of each emperor", 60)) +
labs(caption = "Data: https://bit.ly/2N2spWr | Visualization: @philmassicotte") +
scale_color_brewer(palette = "Pastel2")
ggsave(
here::here("graphs", "tidytuesday_2019_week33.png"),
type = "cairo",
dpi = 600,
height = 14,
width = 8
)
# Chunk 5
emperors %>%
count(cause) %>%
mutate(cause = fct_reorder(cause, n)) %>%
ggplot(aes(x = cause, y = n)) +
geom_col() +
coord_flip() +
xlab(NULL) +
ylab("Number of death") +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.2))) +
labs(title = "Principal causes of death") +
labs(subtitle = glue("Based on {nrow(emperors)} observations")) +
labs(caption = "Data: https://bit.ly/2N2spWr | Visualization: @philmassicotte")
# Chunk 6
emperors %>%
summarise(
`Average age at death` = paste(round(mean(age), 0), "years old"),
`Average reign duration` = paste(round(mean(reign_duration), 0), "years old"),
`Youngest emperor` = paste(round(min(age), 0), "years old"),
`Oldest emperor` = paste(round(max(age), 0), "years old"),
`Longest reign` = paste(round(max(reign_duration), 2), "years"),
`Shortest reign` = paste(round(min(reign_duration), 2), "years"),
) %>%
gather() %>%
set_names(c("Stats", "Age")) %>%
knitr::kable()
# Chunk 1: setup
knitr::opts_chunk$set(
comment = "#>",
collapse = TRUE,
cache = FALSE,
dpi = 300,
out.width = "100%",
fig.align = "center",
fig.width = 8,
fig.asp = 0.618, # 1 / phi
fig.show = "hold",
dev = "svglite",
message = FALSE,
warning = FALSE,
echo = TRUE
)
library(tidyverse)
library(ggpmthemes)
library(glue)
library(ggforce)
theme_set(theme_poppins())
# Chunk 2
emperors <-
readr::read_csv(
"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-08-13/emperors.csv"
)
emperors
# Chunk 3
emperors <- emperors %>%
drop_na(death, birth, reign_start, reign_end) %>%
filter(death >= birth) %>%
mutate(age = lubridate::time_length(death - birth, unit = "year")) %>%
mutate(reign_duration = lubridate::time_length(reign_end - reign_start, unit = "year"))
# Chunk 4
emperors %>%
mutate(
name = glue(
"{name} ({round(age, digits = 0)} years old)"
)
) %>%
mutate(name = fct_reorder(name, death)) %>%
ggplot(aes(
x = birth,
xend = death,
y = name,
yend = name
)) +
geom_segment(size = 3, lineend = "round", aes(color = dynasty)) +
geom_segment(
aes(x = reign_start, xend = reign_end),
color = "black",
size = 1,
lineend = "round"
) +
geom_label(aes(
x = death,
y = name,
label = glue(
"Reign: {round(reign_duration, digits = 2)} years"
)
),
hjust = -0.1,
label.size = 0,
size = 3,
family = "Poppins"
) +
geom_mark_circle(
aes(
label = glue("{name}"),
description = "The oldest emperor",
filter = age == max(age),
color = dynasty
),
expand = unit(0.01, "mm"),
label.family = c("Poppins"),
label.fontsize = 8,
label.buffer = unit(5, "mm"),
label.hjust = 1,
show.legend = FALSE
) +
geom_mark_circle(
aes(
label = glue("{name}"),
description = "The longest reign",
filter = reign_duration == max(reign_duration),
color = dynasty
),
expand = unit(0.01, "mm"),
label.family = c("Poppins"),
label.fontsize = 8,
label.buffer = unit(5, "mm"),
label.hjust = 1,
show.legend = FALSE
) +
theme(legend.position = "bottom") +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
scale_x_date(expand = expand_scale(mult = c(0.02, 0.3))) +
ylab(NULL) +
xlab("Years") +
labs(color = "Dynasty") +
labs(title = str_wrap("Roman emperors: their birth, death and reign", 35)) +
labs(subtitle = str_wrap("Colored bars represent the lifespan whereas the black bars the duration of the reign of each emperor", 60)) +
labs(caption = "Data: https://bit.ly/2N2spWr | Visualization: @philmassicotte") +
scale_color_brewer(palette = "Pastel2")
ggsave(
here::here("graphs", "tidytuesday_2019_week33.png"),
type = "cairo",
dpi = 600,
height = 14,
width = 8
)
# Chunk 5
emperors %>%
count(cause) %>%
mutate(cause = fct_reorder(cause, n)) %>%
ggplot(aes(x = cause, y = n)) +
geom_col() +
coord_flip() +
xlab(NULL) +
ylab("Number of death") +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.2))) +
labs(title = "Principal causes of death") +
labs(subtitle = glue("Based on {nrow(emperors)} observations")) +
labs(caption = "Data: https://bit.ly/2N2spWr | Visualization: @philmassicotte")
# Chunk 6
emperors %>%
summarise(
`Average age at death` = paste(round(mean(age), 0), "years old"),
`Average reign duration` = paste(round(mean(reign_duration), 0), "years old"),
`Youngest emperor` = paste(round(min(age), 0), "years old"),
`Oldest emperor` = paste(round(max(age), 0), "years old"),
`Longest reign` = paste(round(max(reign_duration), 2), "years"),
`Shortest reign` = paste(round(min(reign_duration), 2), "years"),
) %>%
gather() %>%
set_names(c("Stats", "Age")) %>%
knitr::kable()
# Chunk 1: setup
knitr::opts_chunk$set(
comment = "#>",
collapse = TRUE,
cache = FALSE,
dpi = 600,
out.width = "100%",
fig.align = "center",
fig.width = 8,
fig.asp = 0.618, # 1 / phi
fig.show = "hold",
dev = "png",
message = FALSE,
warning = FALSE,
echo = TRUE
)
library(tidyverse)
library(ggpmthemes)
library(glue)
library(tidytext)
library(ggridges)
library(emojifont)
theme_set(theme_poppins())
# Chunk 2
bob_ross <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-08-06/bob-ross.csv") %>%
janitor::clean_names() %>%
mutate(title = str_to_title(title))
bob_ross <- bob_ross %>%
select(-contains("frame")) %>%
pivot_longer(
-c(episode, title),
names_to = "keyword",
values_to = "is_present"
) %>%
separate(episode, into = c("season", "episode"), sep = "E") %>%
mutate(season = str_extract(season, "[:digit:]+")) %>%
mutate_at(vars(season, episode), parse_number) %>%
mutate(keyword = str_replace(keyword, "_", " ")) %>%
mutate(keyword = str_to_title(keyword))
bob_ross
# Chunk 3
bob_ross %>%
distinct(keyword) %>%
pull(keyword)
# Chunk 4
bob_ross <- bob_ross %>%
mutate(keyword = case_when(
keyword == "Lake" ~ "Lakes",
keyword == "Mountain" ~ "Mountains",
keyword == "Tree" ~ "Trees",
TRUE ~ keyword
))
bob_ross <- bob_ross %>%
group_by(season, episode, title, keyword) %>%
summarise(is_present = sum(is_present)) %>%
mutate(is_present = ifelse(is_present >= 1, 1, 0)) %>%
ungroup()
bob_ross %>%
distinct(keyword) %>%
pull()
# Chunk 5
top_painting_elements <- bob_ross %>%
group_by(keyword) %>%
summarise(n_painting = sum(is_present), total_painting = n_distinct(title)) %>%
mutate(percent_object = n_painting / total_painting) %>%
mutate(keyword = glue("{keyword} ({round(percent_object * 100, digits = 0)}%)")) %>%
mutate(keyword = fct_reorder(keyword, percent_object))
top_painting_elements %>%
filter(percent_object >= 0.1) %>%
ggplot(aes(x = keyword, y = percent_object)) +
geom_col() +
coord_flip() +
scale_y_continuous(labels = scales::percent, expand = expand_scale(mult = c(0, 0.1))) +
xlab(NULL) +
ylab("Percentage (%)") +
labs(title = "Bob Ross most painted elements") +
labs(subtitle = "Only showing items present more than 10% of the time") +
theme(
panel.grid = element_line(colour = NULL),
panel.grid.minor = element_blank(),
axis.ticks.y = element_blank(),
axis.line = element_blank(),
panel.border = element_blank()
)
# Chunk 6
top_painting_element <- bob_ross %>%
group_by(keyword) %>%
summarise(n = sum(is_present)) %>%
ungroup() %>%
filter(dense_rank(desc(n)) < 10) %>%
inner_join(bob_ross) %>%
group_by(season, keyword) %>%
summarise(n = sum(is_present)) %>%
ungroup() %>%
arrange(desc(n))
# Chunk 7
df <- top_painting_element %>%
distinct(keyword) %>%
arrange(keyword) %>%
mutate(icon = case_when(
keyword == "Bushes" ~ emoji("herb"),
keyword == "Clouds" ~ emoji("cloud"),
keyword == "Conifer" ~ emoji("palm_tree"),
keyword == "Deciduous" ~ emoji("deciduous_tree"),
keyword == "Grass" ~ emoji("seedling"),
keyword == "Lakes" ~ emoji("ocean"),
keyword == "Mountains" ~ emoji("mount_fuji"),
keyword == "River" ~ emoji("ocean"),
keyword == "Trees" ~ emoji("evergreen_tree")
)) %>%
inner_join(top_painting_element) %>%
mutate(keyword = paste(keyword, icon))
df %>%
mutate(keyword = fct_reorder(str_to_title(keyword), desc(n), .fun = sum)) %>%
ggplot(aes(x = season, y = n)) +
geom_line(size = 1) +
facet_wrap(~keyword) +
theme(legend.position = "none") +
xlab("Season #") +
ylab("Number of painted elements") +
labs(title = "Most popular painted elements") +
labs(subtitle = "Based on the nine most painted elements for all the episodes")
# Chunk 8
bob_ross %>%
group_by(season, keyword) %>%
summarise(n = sum(is_present)) %>%
ungroup() %>%
mutate(keyword = str_replace(keyword, "_", " ")) %>%
mutate(keyword = str_to_title(keyword)) %>%
mutate(keyword = fct_reorder(keyword, n, sum)) %>%
ggplot(aes(x = season, y = keyword, fill = n)) +
geom_tile() +
scale_fill_viridis_c(option = "plasma", labels = function(x) round(x)) +
scale_x_continuous(expand = c(0, 0), breaks = seq(0, 35, by = 5)) +
scale_y_discrete(expand = c(0, 0)) +
xlab("Season #") +
ylab(NULL) +
labs(fill = "Number of painted element") +
theme(legend.position = "bottom") +
guides(fill = guide_colourbar(title.position = "top", title.hjust = 0.5)) +
labs(title = "Heat map of all painted elements") +
labs(subtitle = "Over all the season") +
theme(
panel.border = element_blank(),
axis.ticks = element_blank()
)
ggsave(
here::here("graphs", "tidytuesday_2019_week32.png"),
type = "cairo",
dpi = 600,
height = 8,
width = 8
)
# Chunk 1: setup
knitr::opts_chunk$set(
comment = "#>",
collapse = TRUE,
cache = FALSE,
dpi = 300,
out.width = "100%",
fig.align = "center",
fig.width = 8,
fig.asp = 0.618, # 1 / phi
fig.show = "hold",
dev = "svglite",
message = FALSE,
warning = FALSE,
echo = TRUE
)
library(tidyverse)
library(ggpmthemes)
library(glue)
library(ggforce)
theme_set(theme_poppins())
# Chunk 2
bob_ross <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-08-06/bob-ross.csv") %>%
janitor::clean_names() %>%
mutate(title = str_to_title(title))
bob_ross <- bob_ross %>%
select(-contains("frame")) %>%
pivot_longer(
-c(episode, title),
names_to = "keyword",
values_to = "is_present"
) %>%
separate(episode, into = c("season", "episode"), sep = "E") %>%
mutate(season = str_extract(season, "[:digit:]+")) %>%
mutate_at(vars(season, episode), parse_number) %>%
mutate(keyword = str_replace(keyword, "_", " ")) %>%
mutate(keyword = str_to_title(keyword))
bob_ross
# Chunk 3
bob_ross %>%
distinct(keyword) %>%
pull(keyword)
# Chunk 4
bob_ross <- bob_ross %>%
mutate(keyword = case_when(
keyword == "Lake" ~ "Lakes",
keyword == "Mountain" ~ "Mountains",
keyword == "Tree" ~ "Trees",
TRUE ~ keyword
))
bob_ross <- bob_ross %>%
group_by(season, episode, title, keyword) %>%
summarise(is_present = sum(is_present)) %>%
mutate(is_present = ifelse(is_present >= 1, 1, 0)) %>%
ungroup()
bob_ross %>%
distinct(keyword) %>%
pull()
# Chunk 5
top_painting_elements <- bob_ross %>%
group_by(keyword) %>%
summarise(n_painting = sum(is_present), total_painting = n_distinct(title)) %>%
mutate(percent_object = n_painting / total_painting) %>%
mutate(keyword = glue("{keyword} ({round(percent_object * 100, digits = 0)}%)")) %>%
mutate(keyword = fct_reorder(keyword, percent_object))
top_painting_elements %>%
filter(percent_object >= 0.1) %>%
ggplot(aes(x = keyword, y = percent_object)) +
geom_col() +
coord_flip() +
scale_y_continuous(labels = scales::percent, expand = expand_scale(mult = c(0, 0.1))) +
xlab(NULL) +
ylab("Percentage (%)") +
labs(title = "Bob Ross most painted elements") +
labs(subtitle = "Only showing items present more than 10% of the time") +
theme(
panel.grid = element_line(colour = NULL),
panel.grid.minor = element_blank(),
axis.ticks.y = element_blank(),
axis.line = element_blank(),
panel.border = element_blank()
)
# Chunk 6
top_painting_element <- bob_ross %>%
group_by(keyword) %>%
summarise(n = sum(is_present)) %>%
ungroup() %>%
filter(dense_rank(desc(n)) < 10) %>%
inner_join(bob_ross) %>%
group_by(season, keyword) %>%
summarise(n = sum(is_present)) %>%
ungroup() %>%
arrange(desc(n))
# Chunk 7
df <- top_painting_element %>%
distinct(keyword) %>%
arrange(keyword) %>%
mutate(icon = case_when(
keyword == "Bushes" ~ emoji("herb"),
keyword == "Clouds" ~ emoji("cloud"),
keyword == "Conifer" ~ emoji("palm_tree"),
keyword == "Deciduous" ~ emoji("deciduous_tree"),
keyword == "Grass" ~ emoji("seedling"),
keyword == "Lakes" ~ emoji("ocean"),
keyword == "Mountains" ~ emoji("mount_fuji"),
keyword == "River" ~ emoji("ocean"),
keyword == "Trees" ~ emoji("evergreen_tree")
)) %>%
inner_join(top_painting_element) %>%
mutate(keyword = paste(keyword, icon))
df %>%
mutate(keyword = fct_reorder(str_to_title(keyword), desc(n), .fun = sum)) %>%
ggplot(aes(x = season, y = n)) +
geom_line(size = 1) +
facet_wrap(~keyword) +
theme(legend.position = "none") +
xlab("Season #") +
ylab("Number of painted elements") +
labs(title = "Most popular painted elements") +
labs(subtitle = "Based on the nine most painted elements for all the episodes")
# Chunk 8
bob_ross %>%
group_by(season, keyword) %>%
summarise(n = sum(is_present)) %>%
ungroup() %>%
mutate(keyword = str_replace(keyword, "_", " ")) %>%
mutate(keyword = str_to_title(keyword)) %>%
mutate(keyword = fct_reorder(keyword, n, sum)) %>%
ggplot(aes(x = season, y = keyword, fill = n)) +
geom_tile() +
scale_fill_viridis_c(option = "plasma", labels = function(x) round(x)) +
scale_x_continuous(expand = c(0, 0), breaks = seq(0, 35, by = 5)) +
scale_y_discrete(expand = c(0, 0)) +
xlab("Season #") +
ylab(NULL) +
labs(fill = "Number of painted element") +
theme(legend.position = "bottom") +
guides(fill = guide_colourbar(title.position = "top", title.hjust = 0.5)) +
labs(title = "Heat map of all painted elements") +
labs(subtitle = "Over all the season") +
theme(
panel.border = element_blank(),
axis.ticks = element_blank()
)
ggsave(
here::here("graphs", "tidytuesday_2019_week32.png"),
type = "cairo",
dpi = 600,
height = 8,
width = 8
)
